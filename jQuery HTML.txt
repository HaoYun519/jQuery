=====================================jQuery HTML==============================================================================

jQuery - 获取内容和属性
jQuery 拥有可操作 HTML 元素和属性的强大方法。

jQuery DOM 操作
jQuery 中非常重要的部分，就是操作 DOM 的能力。
jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易。

DOM = Document Object Model（文档对象模型）
   DOM 定义访问 HTML 和 XML 文档的标准：
   W3C 文档对象模型独立于平台和语言的界面，允许程序和脚本动态访问和更新文档的内容、结构以及样式。

=====================================jQuery 捕获===============================================================================

三个简单实用的用于 DOM 操作的 jQuery 方法：

text() - 设置或返回所选元素的文本内容
html() - 设置或返回所选元素的内容（包括 HTML 标记）
val() - 设置或返回表单字段的值

下面的例子演示如何通过 jQuery text() 和 html() 方法来获得内容：

    $("#btn1").click(function(){
        alert("Text: " + $("#test").text());
    });
    $("#btn2").click(function(){
        alert("HTML: " + $("#test").html());
    });

下面的例子演示如何通过 jQuery val() 方法获得输入字段的值：

    $("#btn1").click(function(){
      alert("值为: " + $("#test").val());
    });

text()、html() 以及 val() 的回调函数
上面的三个 jQuery 方法：text()、html() 以及 val()，同样拥有回调函数。
回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。
然后以函数新值返回您希望使用的字符串。

下面的例子演示带有回调函数的 text() 和 html()：

    $("#btn1").click(function(){
        $("#test1").text(function(i,origText){
            return "旧文本: " + origText + " 新文本: Hello world! (index: " + i + ")"; 
        });
    });
 
    $("#btn2").click(function(){
        $("#test2").html(function(i,origText){
            return "旧 html: " + origText + " 新 html: Hello <b>world!</b> (index: " + i + ")"; 
        });
    });

获取属性 - attr()
jQuery attr() 方法用于获取属性值。
下面的例子演示如何获得链接中 href 属性的值：

    $("button").click(function(){
        alert($("#runoob").attr("href"));
    });

=====================================jQuery 添加元素===============================================================================

添加新的 HTML 内容：
    append() - 在被选元素的结尾插入内容
    prepend() - 在被选元素的开头插入内容
    after() - 在被选元素之后插入内容
    before() - 在被选元素之前插入内容

jQuery append() 方法在被选元素的结尾插入内容（仍然在该元素的内部）。
    $("p").append("追加文本");

jQuery prepend() 方法在被选元素的开头插入内容。
    $("p").prepend("在开头追加文本");

jQuery after() 方法在被选元素之后插入内容。
    $("img").after("在后面添加文本");

jQuery before() 方法在被选元素之前插入内容。
    $("img").before("在前面添加文本");

=====================================jQuery 删除元素===============================================================================

如需删除元素和内容，一般可使用以下两个 jQuery 方法：
    remove() - 删除被选元素（及其子元素）
    empty() - 从被选元素中删除子元素

jQuery remove() 方法删除被选元素及其子元素。
    $("#div1").remove();

jQuery empty() 方法删除被选元素的子元素。
    $("#div1").empty();

jQuery remove() 方法也可接受一个参数，允许您对被删元素进行过滤。
    下面的例子删除 class="italic" 的所有 <p> 元素：
    $("p").remove(".italic");

=====================================获取并设置 CSS=======================================================================

jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：
    addClass()    - 向被选元素添加一个或多个类
    removeClass() - 从被选元素删除一个或多个类
    toggleClass() - 对被选元素进行添加/删除类的切换操作
    css()         - 设置或返回样式属性

下面的例子展示如何向不同的元素添加 class 属性：
    $("button").click(function(){
      $("h1,h2,p").addClass("blue");
      $("div").addClass("important");
    });

下面的例子演示如何在不同的元素中删除指定的 class 属性：
    $("button").click(function(){
      $("h1,h2,p").removeClass("blue");
    });

下面的例子将展示如何使用 jQuery toggleClass() 方法。
该方法对被选元素进行添加/删除类的切换操作：
    $("button").click(function(){
      $("h1,h2,p").toggleClass("blue");
    });

jQuer css() 方法设置或返回被选元素的一个或多个样式属性。

    如需返回指定的 CSS 属性的值，请使用如下语法：
        css("propertyname");
    返回首个匹配元素的 background-color 值：：
        $("p").css("background-color");

    如需设置指定的 CSS 属性，请使用如下语法：
        css("propertyname","value");
    为所有匹配元素设置 background-color 值：
        $("p").css("background-color","yellow");

    如需设置多个 CSS 属性，请使用如下语法：
        css({"propertyname":"value","propertyname":"value",...});

    为所有匹配元素设置 background-color 和 font-size：
    $("p").css({"background-color":"yellow","font-size":"200%"});

=====================================jQuery 尺寸=======================================================================

通过 jQuery，很容易处理元素和浏览器窗口的尺寸。

jQuery 提供多个处理尺寸的重要方法：

    width()
    height()
    innerWidth()
    innerHeight()
    outerWidth()
    outerHeight()

jQuery width() 和 height() 方法
width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。
height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。

下面的例子返回指定的 <div> 元素的宽度和高度：

    $("button").click(function(){
      var txt="";
      txt+="div 的宽度是: " + $("#div1").width() + "</br>";
      txt+="div 的高度是: " + $("#div1").height();
      $("#div1").html(txt);
    });

jQuery innerWidth() 和 innerHeight() 方法
innerWidth() 方法返回元素的宽度（包括内边距）。
innerHeight() 方法返回元素的高度（包括内边距）。

下面的例子返回指定的 <div> 元素的 inner-width/height：

    $("button").click(function(){
      var txt="";
      txt+="div 宽度，包含内边距: " + $("#div1").innerWidth() + "</br>";
        txt+="div 高度，包含内边距: " + $("#div1").innerHeight();
      $("#div1").html(txt);
    });

jQuery outerWidth() 和 outerHeight() 方法
outerWidth() 方法返回元素的宽度（包括内边距和边框）。
outerHeight() 方法返回元素的高度（包括内边距和边框）。

下面的例子返回指定的 <div> 元素的 outer-width/height：

    $("button").click(function(){
      var txt="";
      txt+="div 宽度，包含内边距和边框: " + $("#div1").outerWidth() + "</br>";
        txt+="div 高度，包含内边距和边框: " + $("#div1").outerHeight();
      $("#div1").html(txt);
    });
